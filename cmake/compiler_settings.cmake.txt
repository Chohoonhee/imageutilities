include(${CMAKE_CURRENT_LIST_DIR}/flags_functions.cmake.txt) 

set(CUDA_PROPAGATE_HOST_FLAGS OFF)

if (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU" OR ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
	# using GCC or using Clang
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} -std=c++11 -fPIC -fmax-errors=3 -fpermissive -ggdb -Wunused-result -Wno-unused-variable -Wno-unused-value -Wno-unused-but-set-variable -Wdisabled-optimization -Wdiv-by-zero -Wfloat-equal -Wc++11-compat")
	set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -expt-extended-lambda -ftemplate-backtrace-limit=2 -lineinfo -std=c++11 -Xcompiler -Wno-sign-compare")
        if(BUILD_RELEASE OR CMAKE_BUILD_TYPE STREQUAL "Release" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo" OR NOT CMAKE_BUILD_TYPE) #RELEASE 
		add_flags(CMAKE_CXX_FLAGS "-fopenmp -O3 -DPARALLEL -ffast-math -DNDEBUG")
		add_flags(CUDA_NVCC_FLAGS "-O3 -keep -src-in-ptx -DNDEBUG")
		# warn about local memory and register spills
		add_flags(CUDA_NVCC_FLAGS "-Xptxas -warn-lmem-usage -Xptxas -warn-spills")
		set(CMAKE_BUILD_TYPE "Release")
	else() # DEBUG
		add_flags(CMAKE_CXX_FLAGS "-ggdb")
		# debug and and device code stack range checking
		add_flags(CUDA_NVCC_FLAGS "-G -g -keep -src-in-ptx -pg -Xptxas -g")
		set(CMAKE_BUILD_TYPE "Debug")
	endif()
elseif (MSVC)
	# using Visual Studio C++
	add_definitions("/MT")
	# Disable Warning	C4267: conversion from 'size_t' to 'thrust', possible loss of data
	# Disable Warning C4800: forcing value to bool 'true' of 'false'
	# Disable Warning C4996: This function of variable may be unsafe. Consider using strerror_s instead.
	ADD_DEFINITIONS("/wd4267 /wd4800 /wd4996")
	#set(CMAKE_VS_PLATFORM_TOOLSET "CTP_Nov2013")
	#ADD_DEFINITIONS("/E")
	set(CUDA_NVCC_FLAGS "-expt-extended-lambda -ftemplate-backtrace-limit=2 -lineinfo")
endif()


#SET( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -rdynamic" )
#set(CUDA_SEPARABLE_COMPILATION ON)

set(BUILD_SHARED_LIBS true)

include(${CMAKE_CURRENT_LIST_DIR}/custom_settings.cmake.txt OPTIONAL)

cleanup_flags(CUDA_NVCC_FLAGS CUDA_NVCC_FLAGS)

message("COMPILER FLAGS:")
message(STATUS "CMAKE_CXX_FLAGS= ${CMAKE_CXX_FLAGS}")
message(STATUS "CUDA_NVCC_FLAGS= ${CUDA_NVCC_FLAGS}")
message(STATUS "CUDA_PROPAGATE_HOST_FLAGS= ${CUDA_PROPAGATE_HOST_FLAGS}")
